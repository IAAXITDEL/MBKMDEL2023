List<PieChartSectionData> _getChartSections() {
  final List<Color> colors = [
    Colors.blue,
    Colors.orange,
    Colors.green,
    Colors.redAccent
  ];

  FutureBuilder<Map<String, int>>(
    future: calculateDeviceCountsByStatus(),
    builder: (context, snapshot) {
      if (snapshot.connectionState == ConnectionState.done) {
        final deviceCounts = snapshot.data;
        final status = 'in-use-pilot';
        final count = deviceCounts[status] ?? 0;

        return [
          PieChartSectionData(
            title: '$status\n$count',
            value: count.toDouble(),
            color: colors[0], // Anda dapat mengatur warna sesuai keinginan
            radius: 110,
            titleStyle: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: Colors.black,
              fontFamily: 'Poppins',
            ),
          ),
        ];
      } else {
        return Center(child: CircularProgressIndicator());
      }
    },
  );
}


  return List.generate(widget.deviceCounts.length, (i) {
      final status = widget.deviceCounts.keys.toList()[i];
      final count = widget.deviceCounts[status] ?? 0;









  Future<Map<String, int>> calculateDeviceCountsByStatus() async {
    final firestore = FirebaseFirestore.instance;
    final QuerySnapshot querySnapshot = await firestore
        .collection('pilot-device-1')
        .where('timestamp',
            isGreaterThanOrEqualTo: selectedStartDate,
            isLessThanOrEqualTo: selectedEndDate)
        .where('statusDevice',
            whereIn: ['Done', 'in-use-pilot', 'handover-to-other-crew']).get();

    final Map<String, int> deviceCountsByStatus = {
      'Done': 0,
      'in-use-pilot': 0,
      'handover-to-other-crew': 0,
    };

    querySnapshot.docs.forEach((doc) {
      final data = doc.data() as Map<String, dynamic>;
      final status = data['statusDevice'] as String;
      deviceCountsByStatus[status] = (deviceCountsByStatus[status] ?? 0) + 1;
    });

    return deviceCountsByStatus;
  }

  Future<Map<String, int>> calculateDeviceCountsByHub() async {
    final firestore = FirebaseFirestore.instance;
    final QuerySnapshot querySnapshot = await firestore
        .collection('pilot-device-1')
        .where('timestamp',
            isGreaterThanOrEqualTo: selectedStartDate,
            isLessThanOrEqualTo: selectedEndDate)
        .where('statusDevice',
            whereIn: ['Done', 'in-use-pilot', 'handover-to-other-crew']).get();

    final Map<String, int> deviceCountsByHub = {
      'CGK': 0,
      'KNO': 0,
      'DPS': 0,
      'SUB': 0,
    };

    querySnapshot.docs.forEach((doc) {
      final data = doc.data() as Map<String, dynamic>;
      final hub = data['field_hub'] as String;
      final status = data['statusDevice'] as String;

      if (deviceCountsByHub.containsKey(hub) && status != null) {
        deviceCountsByHub[hub] = (deviceCountsByHub[hub] ?? 0) + 1;
      }
    });

    return deviceCountsByHub;
  }